openapi: 3.0.3
info:
  title: Библиотека
  description: Простой сервис библиотеки
  contact: 
    email: sergey.natalenko@mail.ru
  license:
    name: GNU 3.0
  version: 1.0.0

servers:
  - url: http://127.0.0.1:80/api

tags:
  - name: users
    description: API для работы с пользователем
  - name: books
    description: API для работы с книгами

paths:
  /users:
    post:
      tags:
        - users
      summary: Создает нового пользователя в сервисе
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BaseUser'
      responses:
        "200":
          description: Добавление пользователя прошло успешно
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FullUser'
        "400":
          description: Неверная схема данных или входные данные неверны
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Request error!
    get:
      tags:
        - users
      summary: Возвращает список пользователей с пагинацией
      parameters:
        - name: page
          in: query
          schema: 
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserList'
        "400":
          description: Переданы не верные данные для пагинации
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  code: 400
                  message: Request error!
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Возвращает данные пользователя
      parameters:
        - name: user_id
          in: path
          schema: 
            type: integer
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
        "404":
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: User not found!
    patch:
      tags:
        - users
      summary: Обновляет данные пользователя
      parameters:
        - name: user_id
          in: path
          schema: 
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BaseUser'
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FullUser'
        "400":
          description: Ошибка запроса
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Request error!
        "404":
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: User not found!
    delete:
      tags:
        - users
      summary: Удаляет пользователя
      description: |
        Удалить пользователя можно только если у него ***нет книг на руках***
      parameters:
        - name: user_id
          in: path
          schema: 
            type: integer
          required: true
      responses: 
        "204":
          description: Удаление прошло успешно или пользователя не существует
        "400":
          description: Ошибка данных - пользователь не вернул книги
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Request error!
  /users/{user_id}/books:
    get:
      tags:
        - users
      summary: Возвращает список книг, которые взял пользователь
      description: |
        Без дополнительных параметров метод должен возвращать только список книг, которые на руках 
        у пользователя, в том порядке, котором он их брал. Если передан параметр `history=true`, значит должны отображаться только 
        возвращенные книги в порядке их взятия пользователем
      parameters:
        - name: user_id
          in: path
          schema: 
            type: integer
          required: true
        - name: history
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema: 
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserBookList'
        "400":
          description:  Ошибка запроса
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Request error!

        "404":
          description: Пользователь с таким ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
    post:
      tags:
        - users
      summary: Выдает/возвращает книгу пользователя
      description: |
        Параметр метода `action` определяет, какое действие нужно совершить над книгой - 
        выдать (`give`) или вернуть (`return`).
      parameters:
        - name: user_id
          in: path
          schema: 
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/ActionBook'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserBook'

        "400":
          description: |
            Ошибка в запросе - данные неверны или действие невозможно совершить,
            (книга на руках у другого пользователя, книгу уже вернули, книгу не брали).
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Request error"
        "404":
          description: Пользователь или книга с указанными ID не найдены
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Book not found"
                code: 404
  /books:
    get:
      tags:
        - books
      summary: Возвращает список книг с пагинацией и возможностью поиска по названию
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
        - name: given
          in: query
          required: false
          schema: 
            type: boolean
      description: |
        При передаче параметра `q` должен осуществляться поиск в базе через 
        SQL запрос вида `ilike '%query_string%'` (поиск переданной подстроки в названии).
        Параметр `given` фильтрует книги по выданным или нет.
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookList'
              example:
                page: 1
                size: 10
                total: 1
                items:
                  - id: 1
                    title: Led Zeppilin
                    year: 1995
                    author: John Doe
                    created_at: "2022-11-01T04:25:03"
                    updated_at: "2022-11-01T04:25:03"

        "400":
          description: Ошибка запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Request error!
    post: 
      tags:
        - books
      summary: Создает книгу в сервисе
      requestBody:
        description: Данные книги
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BaseBook'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBook'
        "400":
          description: Ошибка запроса 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  /books/{book_id}:
    get:
      tags:
        - books
      summary: Возвращает информацию о книге
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      description: |
        Возвращает информацию о книге с 10-ю последними записями о ее читателях.
        Также в списке должна присутствовать информация о том, кто ее не вернул, 
        если она на руках. Список читателей сортируется по убыванию даты взятия
        книги.
      responses:
        "200":  
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBook'
            
        "404":
          description: Книга не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: 
                code: 404
                message: Object not found
    patch:
      tags:
        - books
      summary: Обновляет информацию о книге
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Обновленные даныне книги
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseBook'
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBook'
        "400":
          description: Ошибка в данных
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: Request error!
        "404":
          description: Книга не найдена
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: Book not found!
    delete:
      tags:
        - books
      summary: Удаляет книгу из сервиса
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: OK
        "400":
          description: Пользователь не вернул книгу
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: The user did not return the book
components:
  schemas:
    BaseUser:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
      properties:
        id:
          type: integer
          format: int64
          nullable: false
          description: Идентификатор пользователя
          example: 1
        first_name:
          type: string
          nullable: false
          description: Имя пользователя
          example: John
        last_name:
          type: string
          nullable: false
          description: Фамилия пользователя
          example: Doe
        email:
          type: string
          nullable: false
          description: Почта пользователя
          example: john.doe@example.com
    FullUser:
      allOf:
        - $ref: '#/components/schemas/BaseUser'
        - type: object
          properties: 
            created_at:
              type: string
              format: date-time
              nullable: false
              description: Дата добавления пользователя на сервис
              example: "2020-11-16T04:25:03"
            updated_at:
              type: string
              format: date-time
              nullable: false
              description: Дата последнего изменения пользователя
              example: "2020-11-16T04:25:03"

    BaseBook:
      type: object
      required:
        - id
        - title
        - year
        - author
      properties:
        id:
          type: integer
          format: int64
          nullable: false
          description: Уникальный идентификатор
          example: 10
        title:
          type: string
          nullable: false
          description: Название книги
          example: 10 негритят
        year:
          type: integer
          nullable: false
          description: Год издания
          example: 1999
        author:
          type: string
          nullable: false
          description: Автор произведения
          example: Иванов Иван Иванович
    Book:
      allOf:
        - $ref: '#/components/schemas/BaseBook'
        - type: object
          properties:
            created_at:
              type: string
              format: date-time
              nullable: false
              description: Дата добавления книги на сервис
              example: "2020-11-16T04:25:03"
            updated_at:
              type: string
              format: date-time
              nullable: false
              description: Дата последнего изменения информации о книге
              example: "2020-11-16T04:25:03"

    BookList:
      type: object
      required:
        - total
        - page
        - size
        - items
      properties:
        items:
          type: array
          nullable: false
          description: Список книг
          items:
            $ref: '#/components/schemas/Book'
        total:
          type: integer
          nullable: false
          description: Всего объектов
          example: 100
        page:
          type: integer
          nullable: false
          description: Текущая страница
          example: 1
        size:
          type: integer
          nullable: false
          description: Размер страницы
          example: 100

    UserBook:
      type: object
      required:
        - given_datetime
        - return_datetime
        - user_id
      properties:
        given_datetime:
          type: string
          format: date-time
          description: Дата выдачи книги
          example: "2020-11-16T04:25:03"
        return_datetime:
          type: string
          format: date-time
          nullable: true
          description: Дата возврата книги
          example: "2020-11-16T04:25:03"
        user_id:
          type: integer
          format: int64
          nullable: false
          description: Пользователь, который взял книгу
          example: 10 
        book_id:
          type: integer
          format: int 64
          nullable: false
          description: Книга, которую взяли
          example: 17
    
    UserBookList:
      type: object
      required:
        - page
        - size
      properties:
        page:
          type: integer
          format: int64
          nullable: false
          example: 1
        size:
          type: integer
          format: int64
          nullable: false
          example: 10
        total:
          type: integer
          format: int64
          nullable: false
          example: 100
        items:
          type: array
          nullable: false
          description: Список книг
          items:
            $ref: '#/components/schemas/UserBook'


    ActionBook:
      type: object
      required:
        - book_id
        - action
      properties:
        book_id:
          type: integer
          format: int64
          nullable: false
          example: 10
        action:
          type: string
          enum: [ give, return]
          nullable: false
          example: give


    FullBook:
      allOf:
        - $ref: '#/components/schemas/Book' # Cat has all properties of a Pet
        - type: object
          properties: # extra properties only for cats
            history:
              type: array
              nullable: false
              items:
                $ref: '#/components/schemas/UserBook'

    ErrorResponse:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
          description: Описание ошибки
          nullable: false
          example: Object not found!
        code:
          type: integer
          description: Код ошибки
          nullable: false
          example: 404

    UserList: 
      type: object
      required:
        - page
        - size
        - total
        - items
      properties:
        page:
          type: integer
          format: int64
          nullable: false
          example: 1
        size:
          type: integer
          format: int64
          nullable: false
          example: 10
        total:
          type: integer
          format: int64
          nullable: false
          example: 100
        items:
          type: array
          nullable: false
          description: Список пользователей
          items:
            $ref: '#/components/schemas/FullUser'
